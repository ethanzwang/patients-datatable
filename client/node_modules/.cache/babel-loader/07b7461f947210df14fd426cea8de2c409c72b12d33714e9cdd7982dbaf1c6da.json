{"ast":null,"code":"import $ from 'jquery';\nimport * as XLSX from 'xlsx';\nconst isEmpty = value => {\n  return value === undefined || value === null || value === '';\n};\nconst addNewColumnsToTable = (dataTable, newColumns) => {\n  const settings = dataTable.settings()[0];\n  const currentColumns = dataTable.columns().header().toArray().map(header => $(header).text());\n  newColumns.forEach(col => {\n    if (!currentColumns.includes(col)) {\n      const newColumn = {\n        title: col,\n        data: col\n      };\n      settings.aoColumns.push(newColumn);\n      dataTable.rows().every(function () {\n        const rowData = this.data();\n        if (rowData && !rowData.hasOwnProperty(col)) {\n          rowData[col] = '';\n          this.data(rowData);\n        }\n      });\n    }\n  });\n  dataTable.columns.adjust().draw();\n};\nexport const handleExcelUpload = (event, dataTable) => {\n  const file = event.target.files[0];\n  if (file) {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const arrayBuffer = e.target.result;\n      const workbook = XLSX.read(new Uint8Array(arrayBuffer), {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const excelData = XLSX.utils.sheet_to_json(sheet, {\n        header: 1\n      });\n      const headers = excelData[0];\n      const excelRows = excelData.slice(1);\n      const tableColumns = dataTable.columns().header().toArray().map(header => $(header).text());\n      const subjectIndex = headers.indexOf('Subject');\n      if (subjectIndex === -1) {\n        alert('No subject column found');\n        return;\n      }\n      excelRows.forEach(excelRow => {\n        const excelSubject = excelRow[subjectIndex];\n        let found = false;\n        dataTable.rows().every(function () {\n          const rowData = this.data();\n          if (rowData.Subject === excelSubject) {\n            tableColumns.forEach(column => {\n              const excelColumnIdx = headers.indexOf(column);\n              if (excelColumnIdx > -1 && !isEmpty(excelRow[excelColumnIdx])) {\n                rowData[column] = excelRow[excelColumnIdx];\n              }\n            });\n            this.data(rowData).draw();\n            found = true;\n            return false;\n          }\n          return true;\n        });\n        if (!found) {\n          const newColumns = headers.filter(col => !tableColumns.includes(col));\n          if (newColumns.length > 0) {\n            addNewColumnsToTable(dataTable, newColumns);\n          }\n          const newRow = {};\n          headers.forEach((header, idx) => {\n            newRow[header] = !isEmpty(excelRow[idx]) ? excelRow[idx] : '';\n          });\n          dataTable.row.add(newRow).draw();\n        }\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n};","map":{"version":3,"names":["$","XLSX","isEmpty","value","undefined","addNewColumnsToTable","dataTable","newColumns","settings","currentColumns","columns","header","toArray","map","text","forEach","col","includes","newColumn","title","data","aoColumns","push","rows","every","rowData","hasOwnProperty","adjust","draw","handleExcelUpload","event","file","target","files","reader","FileReader","onload","e","arrayBuffer","result","workbook","read","Uint8Array","type","sheetName","SheetNames","sheet","Sheets","excelData","utils","sheet_to_json","headers","excelRows","slice","tableColumns","subjectIndex","indexOf","alert","excelRow","excelSubject","found","Subject","column","excelColumnIdx","filter","length","newRow","idx","row","add","readAsArrayBuffer"],"sources":["/Users/ethanzwang/Desktop/patients-datatable/client/src/components/uploadExcel.js"],"sourcesContent":["import $ from 'jquery';\nimport * as XLSX from 'xlsx';\n\nconst isEmpty = (value) => {\n    return value === undefined || value === null || value === '';\n};\n\nconst addNewColumnsToTable = (dataTable, newColumns) => {\n    const settings = dataTable.settings()[0];\n    const currentColumns = dataTable.columns().header().toArray().map(header => $(header).text());\n\n    newColumns.forEach((col) => {\n        if (!currentColumns.includes(col)) {\n            const newColumn = { title: col, data: col };\n            settings.aoColumns.push(newColumn);\n\n            dataTable.rows().every(function () {\n                const rowData = this.data();\n                if (rowData && !rowData.hasOwnProperty(col)) {\n                    rowData[col] = '';\n                    this.data(rowData);\n                } \n            });\n        }\n    });\n\n    dataTable.columns.adjust().draw();\n}\n\nexport const handleExcelUpload = (event, dataTable) => {\n    const file = event.target.files[0];\n\n    if (file) {\n        const reader = new FileReader();\n\n        reader.onload = (e) => {\n            const arrayBuffer = e.target.result;\n\n            const workbook = XLSX.read(new Uint8Array(arrayBuffer), { type: 'array' });\n            const sheetName = workbook.SheetNames[0];\n            const sheet = workbook.Sheets[sheetName];\n\n            const excelData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n\n            const headers = excelData[0];\n            const excelRows = excelData.slice(1);\n\n            const tableColumns = dataTable.columns().header().toArray().map(header => $(header).text());\n\n            const subjectIndex = headers.indexOf('Subject');\n            if (subjectIndex === -1) {\n                alert('No subject column found');\n                return;\n            }\n\n            excelRows.forEach((excelRow) => {\n                const excelSubject = excelRow[subjectIndex];\n\n                let found = false;\n\n                dataTable.rows().every(function () {\n                    const rowData = this.data();\n\n                    if (rowData.Subject === excelSubject) {\n                        tableColumns.forEach((column) => {\n                            const excelColumnIdx = headers.indexOf(column);\n\n                            if (excelColumnIdx > -1 && !isEmpty(excelRow[excelColumnIdx])) {\n                                rowData[column] = excelRow[excelColumnIdx];\n                            }\n                        });\n\n                        this.data(rowData).draw();\n                        found = true;\n                        return false;\n                    }\n                    return true;\n                });\n\n                if (!found) {\n                    const newColumns= headers.filter(col => !tableColumns.includes(col));\n                    if (newColumns.length > 0) {\n                        addNewColumnsToTable(dataTable, newColumns);\n                    }\n\n                    const newRow = {};\n                    headers.forEach((header, idx) => {\n                        newRow[header] = !isEmpty(excelRow[idx]) ? excelRow[idx] : '';\n                    });\n\n                    dataTable.row.add(newRow).draw()\n                }\n            });\n        };\n\n        reader.readAsArrayBuffer(file);\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}