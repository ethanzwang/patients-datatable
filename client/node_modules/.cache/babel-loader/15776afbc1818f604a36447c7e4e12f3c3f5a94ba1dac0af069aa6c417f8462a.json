{"ast":null,"code":"import $ from 'jquery';\nexport const handleEditRow = table => {\n  table.on('draw', function () {\n    $('#example tbody tr').each(function () {\n      const $row = $(this);\n\n      // Add Edit button if it doesn't exist\n      if ($row.find('.edit-btn').length === 0) {\n        $row.append(`\n              <td>\n                <button class=\"edit-btn\">Edit</button>\n              </td>\n            `);\n      }\n    });\n  });\n\n  // Handle Edit button click\n  $('#example').on('click', '.edit-btn', function () {\n    const $row = $(this).closest('tr');\n    const rowData = table.row($row).data(); // Get current data of the row\n\n    // Replace cell contents with input fields for editing\n    $row.find('td').each(function (index) {\n      if (index < rowData.length) {\n        $(this).html(`<input type=\"text\" value=\"${rowData[index]}\">`);\n      }\n    });\n\n    // Replace the Edit button with Save and Cancel buttons\n    $(this).replaceWith(`\n          <button class=\"save-btn\">Save</button>\n          <button class=\"cancel-btn\">Cancel</button>\n        `);\n  });\n\n  // Handle Save button click\n  $('#example').on('click', '.save-btn', function () {\n    const $row = $(this).closest('tr');\n    const newData = [];\n\n    // Collect new values from input fields\n    $row.find('td input').each(function () {\n      newData.push($(this).val());\n    });\n\n    // Update the table row with new data\n    table.row($row).data(newData).draw(false);\n  });\n\n  // Handle Cancel button click\n  $('#example').on('click', '.cancel-btn', function () {\n    const $row = $(this).closest('tr');\n    const rowData = table.row($row).data(); // Get the original data of the row\n\n    // Restore the original row data\n    table.row($row).data(rowData).draw(false);\n  });\n};","map":{"version":3,"names":["$","handleEditRow","table","on","each","$row","find","length","append","closest","rowData","row","data","index","html","replaceWith","newData","push","val","draw"],"sources":["/Users/ethanzwang/Desktop/patients-datatable/client/src/components/editRow.js"],"sourcesContent":["import $ from 'jquery';\n\nexport const handleEditRow = (table) => {\n    table.on('draw', function () {\n        $('#example tbody tr').each(function () {\n          const $row = $(this);\n    \n          // Add Edit button if it doesn't exist\n          if ($row.find('.edit-btn').length === 0) {\n            $row.append(`\n              <td>\n                <button class=\"edit-btn\">Edit</button>\n              </td>\n            `);\n          }\n        });\n      });\n    \n      // Handle Edit button click\n      $('#example').on('click', '.edit-btn', function () {\n        const $row = $(this).closest('tr');\n        const rowData = table.row($row).data(); // Get current data of the row\n    \n        // Replace cell contents with input fields for editing\n        $row.find('td').each(function (index) {\n          if (index < rowData.length) {\n            $(this).html(`<input type=\"text\" value=\"${rowData[index]}\">`);\n          }\n        });\n    \n        // Replace the Edit button with Save and Cancel buttons\n        $(this).replaceWith(`\n          <button class=\"save-btn\">Save</button>\n          <button class=\"cancel-btn\">Cancel</button>\n        `);\n      });\n    \n      // Handle Save button click\n      $('#example').on('click', '.save-btn', function () {\n        const $row = $(this).closest('tr');\n        const newData = [];\n    \n        // Collect new values from input fields\n        $row.find('td input').each(function () {\n          newData.push($(this).val());\n        });\n    \n        // Update the table row with new data\n        table.row($row).data(newData).draw(false);\n      });\n    \n      // Handle Cancel button click\n      $('#example').on('click', '.cancel-btn', function () {\n        const $row = $(this).closest('tr');\n        const rowData = table.row($row).data(); // Get the original data of the row\n    \n        // Restore the original row data\n        table.row($row).data(rowData).draw(false);\n      });\n};"],"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AAEtB,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EACpCA,KAAK,CAACC,EAAE,CAAC,MAAM,EAAE,YAAY;IACzBH,CAAC,CAAC,mBAAmB,CAAC,CAACI,IAAI,CAAC,YAAY;MACtC,MAAMC,IAAI,GAAGL,CAAC,CAAC,IAAI,CAAC;;MAEpB;MACA,IAAIK,IAAI,CAACC,IAAI,CAAC,WAAW,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QACvCF,IAAI,CAACG,MAAM,CAAC;AACxB;AACA;AACA;AACA,aAAa,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAR,CAAC,CAAC,UAAU,CAAC,CAACG,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,YAAY;IACjD,MAAME,IAAI,GAAGL,CAAC,CAAC,IAAI,CAAC,CAACS,OAAO,CAAC,IAAI,CAAC;IAClC,MAAMC,OAAO,GAAGR,KAAK,CAACS,GAAG,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;;IAExC;IACAP,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC,CAACF,IAAI,CAAC,UAAUS,KAAK,EAAE;MACpC,IAAIA,KAAK,GAAGH,OAAO,CAACH,MAAM,EAAE;QAC1BP,CAAC,CAAC,IAAI,CAAC,CAACc,IAAI,CAAC,6BAA6BJ,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC;MAC/D;IACF,CAAC,CAAC;;IAEF;IACAb,CAAC,CAAC,IAAI,CAAC,CAACe,WAAW,CAAC;AAC5B;AACA;AACA,SAAS,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAf,CAAC,CAAC,UAAU,CAAC,CAACG,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,YAAY;IACjD,MAAME,IAAI,GAAGL,CAAC,CAAC,IAAI,CAAC,CAACS,OAAO,CAAC,IAAI,CAAC;IAClC,MAAMO,OAAO,GAAG,EAAE;;IAElB;IACAX,IAAI,CAACC,IAAI,CAAC,UAAU,CAAC,CAACF,IAAI,CAAC,YAAY;MACrCY,OAAO,CAACC,IAAI,CAACjB,CAAC,CAAC,IAAI,CAAC,CAACkB,GAAG,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACAhB,KAAK,CAACS,GAAG,CAACN,IAAI,CAAC,CAACO,IAAI,CAACI,OAAO,CAAC,CAACG,IAAI,CAAC,KAAK,CAAC;EAC3C,CAAC,CAAC;;EAEF;EACAnB,CAAC,CAAC,UAAU,CAAC,CAACG,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,YAAY;IACnD,MAAME,IAAI,GAAGL,CAAC,CAAC,IAAI,CAAC,CAACS,OAAO,CAAC,IAAI,CAAC;IAClC,MAAMC,OAAO,GAAGR,KAAK,CAACS,GAAG,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;;IAExC;IACAV,KAAK,CAACS,GAAG,CAACN,IAAI,CAAC,CAACO,IAAI,CAACF,OAAO,CAAC,CAACS,IAAI,CAAC,KAAK,CAAC;EAC3C,CAAC,CAAC;AACR,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}